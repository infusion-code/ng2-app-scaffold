[{"__symbolic":"module","version":3,"metadata":{"NotificationBadge":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component"},"arguments":[{"selector":"notificationBadge","template":"\n        <li class=\"dropdown\">\n            <a href=\"#\" class=\"dropdown-toggle\" data-toggle=\"dropdown\" role=\"button\" aria-expanded=\"false\"><i class=\"fa fa-comments-o\"></i> <span *ngIf=\"MessageCount > 0\">{{MessageCount}}</span></a>\n            <ul class=\"dropdown-menu animated fadeInDown\">\n                <li class=\"title\">\n                    {{Label}} <span class=\"badge pull-right\">{{MessageCount}}</span>\n                </li>\n                <li *ngIf=\"Messages == null || Messages.length == 0\" class=\"message\">\n                    No new notifications\n                </li>\n                <ng-container *ngIf=\"Messages != null && Messages.length > 0\">\n                    <ul class=\"list-group notifications\">\n                        <ng-container *ngFor=\"let m of _messages\">\n                            <a *ngIf=\"m.Detail == null || m.Detail == ''\">\n                                <li class=\"list-group-item message\">\n                                    {{m.Title}}\n                                </li>\n                            </a>\n                            <a *ngIf=\"m.Detail != null && m.Detail != ''\" [routerLink]=[m.Detail]>\n                                <li class=\"list-group-item message\">\n                                    {{m.Title}}\n                                </li>\n                            </a>\n                        </ng-container>\n                    </ul>\n                </ng-container>\n            </ul>\n        </li>\n    ","styles":["\n        :host { float: left; }\n        :host > li, :host > li > a {display: block }\n        :host > li > a { font-family: 'Roboto Condensed', sans-serif; height: 60px; line-height: 60px; padding: 0px 20px 0px 20px; }\n        :host > li > a { font-family: 'Roboto Condensed', sans-serif; height: 60px; line-height: 60px; padding: 0px 20px 0px 20px; color: #fff }\n        .dropdown-menu { padding: 0; border: 0; border-radius: 0px; animation-duration: 0.4s; -webkit-animation-duration: 0.4s; z-index: -1; position: absolute; }\n        .dropdown-menu .notifications.list-group {list-style: none; padding: 0;margin: 0; }\n        .dropdown-menu .notifications.list-group .list-group-item { min-width: 175px; padding: 8px; border: 0; border-bottom: 1px solid #EEE; }\n        .dropdown-menu .notifications.list-group > a .list-group-item { cursor: default }\n        .dropdown-menu .notifications.list-group > a[href] .list-group-item { cursor: pointer !important; }\n        .dropdown-menu .notifications.list-group > a[href] .list-group-item:hover { background-color: rgba(100,100,100,0.1); }\n        .dropdown-menu .title { font-family: 'Roboto Condensed', sans-serif; padding: 5px 10px; -moz-box-shadow: 0 1px 2px rgba(0, 0, 0, 0.3); -webkit-box-shadow: 0 1px 2px rgba(0, 0, 0, 0.3); box-shadow: 0 1px 2px rgba(0, 0, 0, 0.3); color: #444}\n        .dropdown-menu .message { font-family: 'Roboto Condensed', sans-serif; text-align: center; padding: 10px 20px; color: #444; text-decoration: none; }\n        .dropdown > a:hover { text-decoration: none; color: #ddd}\n        .dropdown.open > a { background-color: #575F68; }\n        .dropdown-menu > .title { cursor: default; }\n    "]}]}],"members":{"Label":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","module":"../services/notifications","name":"NotificationsService"}]}],"ngOnInit":[{"__symbolic":"method"}]}}}},{"__symbolic":"module","version":1,"metadata":{"NotificationBadge":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component"},"arguments":[{"selector":"notificationBadge","template":"\n        <li class=\"dropdown\">\n            <a href=\"#\" class=\"dropdown-toggle\" data-toggle=\"dropdown\" role=\"button\" aria-expanded=\"false\"><i class=\"fa fa-comments-o\"></i> <span *ngIf=\"MessageCount > 0\">{{MessageCount}}</span></a>\n            <ul class=\"dropdown-menu animated fadeInDown\">\n                <li class=\"title\">\n                    {{Label}} <span class=\"badge pull-right\">{{MessageCount}}</span>\n                </li>\n                <li *ngIf=\"Messages == null || Messages.length == 0\" class=\"message\">\n                    No new notifications\n                </li>\n                <ng-container *ngIf=\"Messages != null && Messages.length > 0\">\n                    <ul class=\"list-group notifications\">\n                        <ng-container *ngFor=\"let m of _messages\">\n                            <a *ngIf=\"m.Detail == null || m.Detail == ''\">\n                                <li class=\"list-group-item message\">\n                                    {{m.Title}}\n                                </li>\n                            </a>\n                            <a *ngIf=\"m.Detail != null && m.Detail != ''\" [routerLink]=[m.Detail]>\n                                <li class=\"list-group-item message\">\n                                    {{m.Title}}\n                                </li>\n                            </a>\n                        </ng-container>\n                    </ul>\n                </ng-container>\n            </ul>\n        </li>\n    ","styles":["\n        :host { float: left; }\n        :host > li, :host > li > a {display: block }\n        :host > li > a { font-family: 'Roboto Condensed', sans-serif; height: 60px; line-height: 60px; padding: 0px 20px 0px 20px; }\n        :host > li > a { font-family: 'Roboto Condensed', sans-serif; height: 60px; line-height: 60px; padding: 0px 20px 0px 20px; color: #fff }\n        .dropdown-menu { padding: 0; border: 0; border-radius: 0px; animation-duration: 0.4s; -webkit-animation-duration: 0.4s; z-index: -1; position: absolute; }\n        .dropdown-menu .notifications.list-group {list-style: none; padding: 0;margin: 0; }\n        .dropdown-menu .notifications.list-group .list-group-item { min-width: 175px; padding: 8px; border: 0; border-bottom: 1px solid #EEE; }\n        .dropdown-menu .notifications.list-group > a .list-group-item { cursor: default }\n        .dropdown-menu .notifications.list-group > a[href] .list-group-item { cursor: pointer !important; }\n        .dropdown-menu .notifications.list-group > a[href] .list-group-item:hover { background-color: rgba(100,100,100,0.1); }\n        .dropdown-menu .title { font-family: 'Roboto Condensed', sans-serif; padding: 5px 10px; -moz-box-shadow: 0 1px 2px rgba(0, 0, 0, 0.3); -webkit-box-shadow: 0 1px 2px rgba(0, 0, 0, 0.3); box-shadow: 0 1px 2px rgba(0, 0, 0, 0.3); color: #444}\n        .dropdown-menu .message { font-family: 'Roboto Condensed', sans-serif; text-align: center; padding: 10px 20px; color: #444; text-decoration: none; }\n        .dropdown > a:hover { text-decoration: none; color: #ddd}\n        .dropdown.open > a { background-color: #575F68; }\n        .dropdown-menu > .title { cursor: default; }\n    "]}]}],"members":{"Label":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","module":"../services/notifications","name":"NotificationsService"}]}],"ngOnInit":[{"__symbolic":"method"}]}}}}]